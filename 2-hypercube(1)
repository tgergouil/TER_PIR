{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-1-c78801ed71bf>, line 27)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-c78801ed71bf>\"\u001b[0;36m, line \u001b[0;32m27\u001b[0m\n\u001b[0;31m    for t in range(l):\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "def encrypt(n, plain):\n",
    "    r = random.randrange(0, n)\n",
    "    \n",
    "    # c = g^m * r^n mod n^2\n",
    "    c = pow(n+1, plain, n**2)\n",
    "    c *= pow(r, n, n**2)\n",
    "    \n",
    "    return c % n**2\n",
    "\n",
    "def I(a,b):\n",
    "     if a==b:\n",
    "         return 1\n",
    "     else:\n",
    "         return 0\n",
    "\n",
    "def ALPHABETA(i,j,l,n):\n",
    " B=[]\n",
    " A=[]\n",
    " for t in range(l):\n",
    "   B=B+[encrypt(n,I(t,j))]\n",
    "   A=A+[encrypt(n,I(t,i))]\n",
    " return A,B\n",
    "\n",
    "def phi(B,l,n,x):\n",
    " for i in range(l):\n",
    "  CO=1\n",
    "   for t in range(l):\n",
    "    CO=CO*B[t]**x[(i-1)*l+(t-1)+1]\n",
    "   CO=mod(CO,n**2)\n",
    "   c=c+[CO]\n",
    "  return c\n",
    "\n",
    "def f(phi,A,n,l):\n",
    " u=1\n",
    " v=1\n",
    " for i in range(l):\n",
    "  phi[i]=Integer(phi[i])\n",
    "  ui=phi[i]//n\n",
    "  vi=phi[i]%n\n",
    "  u=u*A[i]**ui\n",
    "  v=v*A[i]**vi\n",
    " u=mod(u,n**2)\n",
    " v=mod(v,n**2)\n",
    " return u,v\n",
    "\n",
    "\n",
    "def decrypt(n, p, q, c):\n",
    "    #lambda\n",
    "    l = lcm(p-1, q-1)\n",
    "    c = pow(c, l, n**2)\n",
    "    #g = n+1\n",
    "    g = pow(n+1, l, n**2)\n",
    "\n",
    "    # c and g must be casted otherwise Sage looks for an inverse mod n that doesn't exist and it crashes.\n",
    "    c = Integer(c)\n",
    "    g = Integer(g)\n",
    "    L_bot = (c - 1) / n\n",
    "    L_top = (g - 1) / n\n",
    "    return (L_bot // L_top) % n\n",
    "\n",
    "def (u,v,n,p,q):\n",
    " return  return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-2-e6b7273acbf6>, line 61)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-e6b7273acbf6>\"\u001b[0;36m, line \u001b[0;32m61\u001b[0m\n\u001b[0;31m    def (u,v,n,p,q):\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def encrypt(n, plain):\n",
    "    r = random.randrange(0, n)\n",
    "    \n",
    "    # c = g^m * r^n mod n^2\n",
    "    c = pow(n+1, plain, n**2)\n",
    "    c *= pow(r, n, n**2)\n",
    "    \n",
    "    return c % n**2\n",
    "\n",
    "def I(a,b):\n",
    "     if a==b:\n",
    "         return 1\n",
    "     else:\n",
    "         return 0\n",
    "\n",
    "def ALPHABETA(i,j,l,n):\n",
    " B=[]\n",
    " A=[]\n",
    " for t in range(l):\n",
    "   B=B+[encrypt(n,I(t,j))]\n",
    "   A=A+[encrypt(n,I(t,i))]\n",
    " return A,B\n",
    "\n",
    "def phi(B,l,n,x):\n",
    "  for i in range(l):\n",
    "   CO=1\n",
    "   for t in range(l):\n",
    "    CO=CO*B[t]**x[(i-1)*l+(t-1)+1]\n",
    "   CO=mod(CO,n**2)\n",
    "   c=c+[CO]\n",
    "  return c\n",
    "\n",
    "def f(phi,A,n,l):\n",
    " u=1\n",
    " v=1\n",
    " for i in range(l):\n",
    "  phi[i]=Integer(phi[i])\n",
    "  ui=phi[i]//n\n",
    "  vi=phi[i]%n\n",
    "  u=u*A[i]**ui\n",
    "  v=v*A[i]**vi\n",
    " u=mod(u,n**2)\n",
    " v=mod(v,n**2)\n",
    " return u,v\n",
    "\n",
    "\n",
    "def decrypt(n, p, q, c):\n",
    "    #lambda\n",
    "    l = lcm(p-1, q-1)\n",
    "    c = pow(c, l, n**2)\n",
    "    #g = n+1\n",
    "    g = pow(n+1, l, n**2)\n",
    "\n",
    "    # c and g must be casted otherwise Sage looks for an inverse mod n that doesn't exist and it crashes.\n",
    "    c = Integer(c)\n",
    "    g = Integer(g)\n",
    "    L_bot = (c - 1) / n\n",
    "    L_top = (g - 1) / n\n",
    "    return (L_bot // L_top) % n\n",
    "\n",
    "def (u,v,n,p,q):\n",
    " return  return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))\n",
    "                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-3-f93356ddfc83>, line 62)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-3-f93356ddfc83>\"\u001b[0;36m, line \u001b[0;32m62\u001b[0m\n\u001b[0;31m    return  return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))\u001b[0m\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def encrypt(n, plain):\n",
    "    r = random.randrange(0, n)\n",
    "    \n",
    "    # c = g^m * r^n mod n^2\n",
    "    c = pow(n+1, plain, n**2)\n",
    "    c *= pow(r, n, n**2)\n",
    "    \n",
    "    return c % n**2\n",
    "\n",
    "def I(a,b):\n",
    "     if a==b:\n",
    "         return 1\n",
    "     else:\n",
    "         return 0\n",
    "\n",
    "def ALPHABETA(i,j,l,n):\n",
    " B=[]\n",
    " A=[]\n",
    " for t in range(l):\n",
    "   B=B+[encrypt(n,I(t,j))]\n",
    "   A=A+[encrypt(n,I(t,i))]\n",
    " return A,B\n",
    "\n",
    "def phi(B,l,n,x):\n",
    "  for i in range(l):\n",
    "   CO=1\n",
    "   for t in range(l):\n",
    "    CO=CO*B[t]**x[(i-1)*l+(t-1)+1]\n",
    "   CO=mod(CO,n**2)\n",
    "   c=c+[CO]\n",
    "  return c\n",
    "\n",
    "def f(phi,A,n,l):\n",
    " u=1\n",
    " v=1\n",
    " for i in range(l):\n",
    "  phi[i]=Integer(phi[i])\n",
    "  ui=phi[i]//n\n",
    "  vi=phi[i]%n\n",
    "  u=u*A[i]**ui\n",
    "  v=v*A[i]**vi\n",
    " u=mod(u,n**2)\n",
    " v=mod(v,n**2)\n",
    " return u,v\n",
    "\n",
    "\n",
    "def decrypt(n, p, q, c):\n",
    "    #lambda\n",
    "    l = lcm(p-1, q-1)\n",
    "    c = pow(c, l, n**2)\n",
    "    #g = n+1\n",
    "    g = pow(n+1, l, n**2)\n",
    "\n",
    "    # c and g must be casted otherwise Sage looks for an inverse mod n that doesn't exist and it crashes.\n",
    "    c = Integer(c)\n",
    "    g = Integer(g)\n",
    "    L_bot = (c - 1) / n\n",
    "    L_top = (g - 1) / n\n",
    "    return (L_bot // L_top) % n\n",
    "\n",
    "def final(u,v,n,p,q):\n",
    " return  return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unexpected EOF while parsing (<ipython-input-4-e746a9d4c689>, line 62)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-e746a9d4c689>\"\u001b[0;36m, line \u001b[0;32m62\u001b[0m\n\u001b[0;31m    return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))\u001b[0m\n\u001b[0m                                                              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unexpected EOF while parsing\n"
     ]
    }
   ],
   "source": [
    "def encrypt(n, plain):\n",
    "    r = random.randrange(0, n)\n",
    "    \n",
    "    # c = g^m * r^n mod n^2\n",
    "    c = pow(n+1, plain, n**2)\n",
    "    c *= pow(r, n, n**2)\n",
    "    \n",
    "    return c % n**2\n",
    "\n",
    "def I(a,b):\n",
    "     if a==b:\n",
    "         return 1\n",
    "     else:\n",
    "         return 0\n",
    "\n",
    "def ALPHABETA(i,j,l,n):\n",
    " B=[]\n",
    " A=[]\n",
    " for t in range(l):\n",
    "   B=B+[encrypt(n,I(t,j))]\n",
    "   A=A+[encrypt(n,I(t,i))]\n",
    " return A,B\n",
    "\n",
    "def phi(B,l,n,x):\n",
    "  for i in range(l):\n",
    "   CO=1\n",
    "   for t in range(l):\n",
    "    CO=CO*B[t]**x[(i-1)*l+(t-1)+1]\n",
    "   CO=mod(CO,n**2)\n",
    "   c=c+[CO]\n",
    "  return c\n",
    "\n",
    "def f(phi,A,n,l):\n",
    " u=1\n",
    " v=1\n",
    " for i in range(l):\n",
    "  phi[i]=Integer(phi[i])\n",
    "  ui=phi[i]//n\n",
    "  vi=phi[i]%n\n",
    "  u=u*A[i]**ui\n",
    "  v=v*A[i]**vi\n",
    " u=mod(u,n**2)\n",
    " v=mod(v,n**2)\n",
    " return u,v\n",
    "\n",
    "\n",
    "def decrypt(n, p, q, c):\n",
    "    #lambda\n",
    "    l = lcm(p-1, q-1)\n",
    "    c = pow(c, l, n**2)\n",
    "    #g = n+1\n",
    "    g = pow(n+1, l, n**2)\n",
    "\n",
    "    # c and g must be casted otherwise Sage looks for an inverse mod n that doesn't exist and it crashes.\n",
    "    c = Integer(c)\n",
    "    g = Integer(g)\n",
    "    L_bot = (c - 1) / n\n",
    "    L_top = (g - 1) / n\n",
    "    return (L_bot // L_top) % n\n",
    "\n",
    "def final(u,v,n,p,q):\n",
    " return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def encrypt(n, plain):\n",
    "    r = random.randrange(0, n)\n",
    "    \n",
    "    # c = g^m * r^n mod n^2\n",
    "    c = pow(n+1, plain, n**2)\n",
    "    c *= pow(r, n, n**2)\n",
    "    \n",
    "    return c % n**2\n",
    "\n",
    "def I(a,b):\n",
    "     if a==b:\n",
    "         return 1\n",
    "     else:\n",
    "         return 0\n",
    "\n",
    "def ALPHABETA(i,j,l,n):\n",
    " B=[]\n",
    " A=[]\n",
    " for t in range(l):\n",
    "   B=B+[encrypt(n,I(t,j))]\n",
    "   A=A+[encrypt(n,I(t,i))]\n",
    " return A,B\n",
    "\n",
    "def phi(B,l,n,x):\n",
    "  for i in range(l):\n",
    "   CO=1\n",
    "   for t in range(l):\n",
    "    CO=CO*B[t]**x[(i-1)*l+(t-1)+1]\n",
    "   CO=mod(CO,n**2)\n",
    "   c=c+[CO]\n",
    "  return c\n",
    "\n",
    "def f(phi,A,n,l):\n",
    " u=1\n",
    " v=1\n",
    " for i in range(l):\n",
    "  phi[i]=Integer(phi[i])\n",
    "  ui=phi[i]//n\n",
    "  vi=phi[i]%n\n",
    "  u=u*A[i]**ui\n",
    "  v=v*A[i]**vi\n",
    " u=mod(u,n**2)\n",
    " v=mod(v,n**2)\n",
    " return u,v\n",
    "\n",
    "\n",
    "def decrypt(n, p, q, c):\n",
    "    #lambda\n",
    "    l = lcm(p-1, q-1)\n",
    "    c = pow(c, l, n**2)\n",
    "    #g = n+1\n",
    "    g = pow(n+1, l, n**2)\n",
    "\n",
    "    # c and g must be casted otherwise Sage looks for an inverse mod n that doesn't exist and it crashes.\n",
    "    c = Integer(c)\n",
    "    g = Integer(g)\n",
    "    L_bot = (c - 1) / n\n",
    "    L_top = (g - 1) / n\n",
    "    return (L_bot // L_top) % n\n",
    "\n",
    "def final(u,v,n,p,q):\n",
    " return decrypt(n,p,q,(decrypt(n,p,q,u)*n+decrypt(n,p,q,v)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
